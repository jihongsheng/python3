# -*- coding: UTF-8 -*-
# 你可能想同时检查多个条件，例如，有时候你需要在两个条件都为True 时才执行相应的操作，而有时
# 候你只要求一个条件为True 时就执行相应的操作。在这些情况下，关键字and 和or 可助你一臂之力。

# 1. 使用and检查多个条件
"""
要检查是否两个条件都为True ，可使用关键字and 将两个条件测试合而为一；如果每个测试都通过了，
整个表达式就为True ；如果至少有一个测试没有通过，整个表达式就为False 。
例如，要检查是否两个人都不小于21岁，可使用下面的测试：
"""

# 我们定义了两个用于存储年龄的变量：age_0 和age_1 。
age_0 = 22
age_1 = 18
# 我们检查这两个变量是否都大于或等于21；左边的测试通过了
# 但右边的测试没有通过，因此整个条件表达式的结果为False
print(age_0 >= 21 and age_1 >= 21)
print('-' * 80)

# 我们将age_1 改为22，这样age_1 的值大于21，
age_1 = 22
# 因此两个测试都通过了，导致整个条件表达式的结果为True 。
print(age_0 >= 21 and age_1 >= 21)

# 为改善可读性，可将每个测试都分别放在一对括号内，但并非必须这样做。如果你使用括号，测试将类似于下面这样：
print((age_0 >= 21) and (age_1 >= 21))

print('-*' * 40)
# 2. 使用or 检查多个条件
# 关键字or 也能够让你检查多个条件，但只要至少有一个条件满足，就能通过整个测试。仅当两个测试都没有通过
# 时，使用or 的表达式才为False 。
# 下面再次检查两个人的年龄，但检查的条件是至少有一个人的年龄不小于21岁：

# 同样，我们首先定义了两个用于存储年龄的变量
age_0 = 22
age_1 = 18
# 处对age_0 的测试通过了，因此整个表达式的结果为True 。
print(age_0 >= 21 or age_1 >= 21)
# 接下来，我们将age_0 减小为18；
age_0 = 18
# 两个测试都没有通过，因此整个表达式的结果为False 。
print(age_0 >= 21 or age_1 >= 21)

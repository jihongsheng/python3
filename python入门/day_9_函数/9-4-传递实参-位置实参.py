# -*- coding: UTF-8 -*-
"""
鉴于函数定义中可能包含多个形参，因此函数调用中也可能包含多个实参。向函数传递实参的方式很多，
可使用位置实参，这要求实参的顺序与形参的顺序相同：也可以使用关键字实参，其中每个实参都是由
变量名和值组成：还可以使用列表和字典
"""
# 位置实参
# 调用函数时，python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的
# 关联方式是基于实参的顺序，这种关联方式被称为位置实参。
# 为明白其中的工作原理，来看一个显示宠物信息的函数。这个函数指出一个宠物属于哪种动物以及它
# 叫什么名字，如下所示：


# 这个函数的定义表明，它需要一种动物类型和一个名字
def describe_pet(animal_type, pet_name):
    """显示宠物的信息"""
    print("\n我有一个%s." % animal_type)
    print("%s的名字叫%s." % (animal_type, pet_name))


# 调用describe_pet() 时，需要按顺序提供一种动物类型和一个名字
describe_pet("小狗", "小黑黑")

# 1. 调用函数多次
# 你可以根据需要调用函数任意次。要再描述一个宠物，只需再次调用describe_pet() 即可：
describe_pet("小猫咪", "小花花")
"""调用函数多次是一种效率极高的工作方式。我们只需在函数中编写描述宠物的代码一次，
然后每当需要描述新宠物时，都可调用这个函数，并向它提供新宠物的信息。即便描述
宠物的代码增加到了10行，你依然只需使用一行调用函数的代码，就可描述一个新宠物。
在函数中，可根据需要使用任意数量的位置实参，Python将按顺序将函数调用中的实参
关联到函数定义中相应的形参。"""


# 位置实参的顺序很重要
# 使用位置实参来调用函数时，如果实参的顺序不正确，结果可能出乎意料：
def describe_pet(animal_type, pet_name):
    """显示宠物的信息"""
    print("\n我有一个%s." % animal_type)
    print("%s的名字叫%s." % (animal_type, pet_name))


describe_pet('小黑黑', '小狗')

# 如果结果像上面一样搞笑，请确认函数调用中实参的顺序与函数定义中形参的顺序一致。

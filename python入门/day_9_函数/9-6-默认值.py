# -*- coding: UTF-8 -*-
# 编写函数时，可给每个形参指定默认值 。在调用函数中给形参提供了实参时，Python将使
# 用指定的实参值；否则，将使用形参的默认值。因此，给形参指定默认值后，可在函数
# 调用中省略相应的实参。使用默认值可简化函数调用，还可清楚地指出函数的典型用法。


# 例如，如果你发现调用describe_pet()时，描述的大都是小狗，就可以将形参animal_type
# 的默认值设置为’dog'。这样调用describe_pet()来描述小狗时，就可不提供这种信息
def describe_pet(pet_name, animal_type='小狗'):
    """显示宠物信息"""
    print("\n我有一个%s." % animal_type)
    print("%s的名字叫%s." % (animal_type, pet_name))


# 这里修改了函数describe_pet() 的定义，在其中给形参animal_type 指定了默认值'小狗'
# 这样，调用这个函数时，如果没有给animal_type 指定值，Python将把这个形参设置为'小狗'
describe_pet(pet_name='小花花')
# 请注意，在这个函数的定义中，修改了形参的排列顺序。由于给animal_type 指定了默认值，
# 无需通过实参来指定动物类型，因此在函数调用中只包含一个实参——宠物的名
# 字。然而，Python依然将这个实参视为位置实参，因此如果函数调用中只包含宠物的名字，
# 这个实参将关联到函数定义中的第一个形参。这就是需要将pet_name 放在形参列表
# 开头的原因所在。
# 现在，使用这个函数的最简单的方式是，在函数调用中只提供小狗的名字：
describe_pet('小黑黑')

# 如果要描述的动物不是小狗，可使用类似于下面的函数调用：
describe_pet(pet_name='小飞飞', animal_type="小鸟")

"""
由于显式地给animal_type 提供了实参，因此Python将忽略这个形参的默认值。
注意 　使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。
这让Python依然能够正确地解读位置实参。
"""
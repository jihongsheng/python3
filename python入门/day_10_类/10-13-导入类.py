# -*- coding: UTF-8 -*-
"""随着你不断地给类添加功能，文件可能变得很长，即便你妥善地使用了继承亦如此。为遵循Python的总体
理念，应让文件尽可能整洁。为在这方面提供帮助，Python允许你将类存储在模块中，然后在主程序中导入所
需的模块。

1.下面来创建一个只包含Car 类的模块。这让我们面临一个微妙的命名问题：在本章中，已经有一个名
为car.py的文件，但这个模块也应命名为car.py，因为它包含表示汽车的代码。我们将这样解决这
个命名问题：将Car 类存储在一个名为car.py的模块中，该模块将覆盖前面使用的文件car.py。从
现在开始，使用该模块的程序都必须使用更具体的文件名，如my_car.py。下面是模块car.py，其
中只包含Car 类的代码："""

print("演示代码在10-13导入类目录下")

# 2.在创建另一个文件my_car.py ，在其中导入Car类并创建其实例

# 3. 从一个模块中导入多个类
# 可根据需要在程序文件中导入任意数量的类。如果我们要在同一个程序中创建普通汽车和电动汽车，就需要将Car 和ElectricCar 类都导入：

# 4.导入整个模块
# 你还可以导入整个模块，再使用句点表示法访问需要的类。这种导入方法很简单，代码也易于阅读。由于创建类实例的代码都包含模块名，因此不会与当前文件使用的任何名称
# 发生冲突。
# 下面的代码导入整个car 模块，并创建一辆普通汽车和一辆电动汽车：


"""
导入模块中的所有类
要导入模块中的每个类，可使用下面的语法：
from module_name import *
不推荐使用这种导入方式，其原因有二。首先，如果只要看一下文件开头的import 语句，就能清楚地知道程序使用了哪些类，将大有裨益；但这种导入方式没有明确地指出你
使用了模块中的哪些类。这种导入方式还可能引发名称方面的困惑。如果你不小心导入了一个与程序文件中其他东西同名的类，将引发难以诊断的错误。这里之所以介绍这种导
入方式，是因为虽然不推荐使用这种方式，但你可能会在别人编写的代码中见到它。
需要从一个模块中导入很多类时，最好导入整个模块，并使用 module_name.class_name 语法来访问类。这样做时，虽然文件开头并没有列出用到的所有类，但你清楚地知
道在程序的哪些地方使用了导入的模块；你还避免了导入模块中的每个类可能引发的名称冲突。
"""


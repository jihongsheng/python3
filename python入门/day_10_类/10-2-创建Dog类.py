# -*- coding: UTF-8 -*-
# 根据dog类创建的每个实例都将存储名字和年龄，我们赋予了每条小狗蹲下（sit())和打滚（roll_over())的能力


class Dog():    # 1
    """一次模拟小狗的简单尝试"""   # 2

    def __init__(self, name, age):  # 3
        """初始化属性name和age"""
        self.name = name    # 4
        self.age = age

    def sit(self):  # 5
        """模拟小狗被命令时蹲下"""
        print("%s 蹲下了！" % self.name.title())

    def roll_over(self):
        """模拟小狗被命令时打滚"""
        print("%s 打滚了！" % self.name.title())

"""
这里需要注意的地方很多，但你也不用担心，本章充斥着这样的结构，你有大把的机会熟悉它。在❶处，
我们定义了一个名为Dog 的类。根据约定，在Python中，首字母大写的名称指的是类。这个类定义中的
括号是空的，因为我们要从空白创建这个类。在❷处，我们编写了一个文档字符串，对这个类的功能作了描述。

1.方法__init__()
类中的函数称为方法，你前面学到的有关函数的一切都适用于方法，就目前而言，唯一重要的差别是调用方法的方式。
__init__()是一个特殊的方法，每当你根据Dog类创建新实例时，python都会自动运行，在这个方法名称中，开头和
末尾都有两个下划线，这是一种约定，旨在避免python默认方法与普通方法发生名称冲突。
我们将方法__init__()定义成了包含三个形参：self、name和age。在这个方法的定义中，形参self必不可少，还必须
位于其他形参的前面。为何必须在方法定义中包含形参self呢？因为python调用这个__init__()方法来创建dog实例时，
将自动传入self。每个与类相关联的方法调用都自动传递实参self,它是一个指向实例本身的引用，让实例能够访问类
中的属性和方法，我们创建Dog类的方法__init__().我们将通过实参向dog()传递名字和年龄：self会自动传递，因此
我们不需要传递它，每当我们根据dog类创建实例时，都需要给最后两个形参(name和age)提供值。

❹处定义的两个变量都有前缀self 。以self 为前缀的变量都可供类中的所有方法使用，我们还可以通过类的任何实
例来访问这些变量。self.name = name 获取存储在形参name 中的值，并将其存储到变量name 中，然后该变量被关
联到当前创建的实例。self.age = age 的作用与此类似。像这样可通过实例访问的变量称为属性 。Dog 类还定义了
另外两个方法：sit() 和roll_over() （见❺）。由于这些方法不需要额外的信息，如名字或年龄，因此它们只有一
个形参self 。我们后面将创建的实例能够访问这些方法，换句话说，它们都会蹲下和打滚。当前，sit() 和roll
_over() 所做的有限，它们只是打印一条消息，指出小狗正蹲下或打滚。但可以扩展这些方法以模拟实际情况：如果
这个类包含在一个计算机游戏中，这些方法将包含创建小狗蹲下和打滚动画效果的代码。如果这个类是用于控制机器
狗的，这些方法将引导机器狗做出蹲下和打滚的动作。
"""
